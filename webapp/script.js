document.addEventListener('DOMContentLoaded', () => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App API
    const WebApp = window.Telegram.WebApp;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    const appTitle = document.getElementById('app-title');
    const expertSelection = document.getElementById('expert-selection');
    const expertList = document.getElementById('expert-list');
    const calendarView = document.getElementById('calendar-view');
    const calendarTitle = document.getElementById('calendar-title');
    const daySelection = document.getElementById('day-selection');
    const periodSelection = document.getElementById('period-selection');
    const slotSelection = document.getElementById('slot-selection');
    const loader = document.getElementById('loader');
    const messageDiv = document.getElementById('message');

    // –ê–¥–º–∏–Ω—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    const adminPanel = document.getElementById('admin-panel');
    const adminExpertList = document.getElementById('admin-expert-list');
    const adminScheduleOptions = document.getElementById('admin-schedule-options');
    const adminExpertName = document.getElementById('admin-expert-name');
    const adminDaySelection = document.getElementById('admin-day-selection');
    const adminPeriodSelection = document.getElementById('admin-period-selection');
    const adminSlotSelection = document.getElementById('admin-slot-selection');

    let currentUserId;
    let isAdmin = false;
    let availableExperts = []; // –î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–∫—Å–ø–µ—Ä—Ç—ã –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
    let selectedExpert = null; // –í—ã–±—Ä–∞–Ω–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è/–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
    let selectedDate = null;
    let selectedPeriod = null;
    let adminActionType = null; // 'block' –∏–ª–∏ 'unblock' –¥–ª—è –∞–¥–º–∏–Ω–∞

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Web App
    WebApp.ready();
    WebApp.expand(); // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º Web App –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω

    function showLoader(show) {
        loader.classList.toggle('hidden', !show);
    }

    function showMessage(msg) {
        messageDiv.textContent = msg;
        messageDiv.classList.remove('hidden');
    }

    function hideAllViews() {
        expertSelection.classList.add('hidden');
        calendarView.classList.add('hidden');
        adminPanel.classList.add('hidden');
        adminScheduleOptions.classList.add('hidden');
        adminDaySelection.classList.add('hidden');
        adminPeriodSelection.classList.add('hidden');
        adminSlotSelection.classList.add('hidden');
    }

    // –ü–∞—Ä—Å–∏–Ω–≥ initData (–ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –±–æ—Ç–æ–º –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ TWA)
    function parseInitData() {
        try {
            const urlParams = new URLSearchParams(window.location.search);
            const dataParam = urlParams.get('data');
            if (dataParam) {
                const decodedData = decodeURIComponent(dataParam);
                const launchData = JSON.parse(decodedData);
                currentUserId = launchData.userId;
                isAdmin = launchData.isAdmin;
                if (!isAdmin) {
                    availableExperts = launchData.expertOptions;
                }
                console.log('Launch Data:', launchData);
                return true;
            }
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ initData:', e);
        }
        return false;
    }

    function getSpecialtyName(spec) {
        const map = { psychologist: '–ü—Å–∏—Ö–æ–ª–æ–≥', tarot: '–¢–∞—Ä–æ–ª–æ–≥', astrologer: '–ê—Å—Ç—Ä–æ–ª–æ–≥' };
        return map[spec] || spec;
    }
    
    // --- –§—É–Ω–∫—Ü–∏–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ ---
    function renderExpertSelection() {
        appTitle.textContent = '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞';
        hideAllViews();
        expertSelection.classList.remove('hidden');
        expertList.innerHTML = '';
        if (availableExperts.length === 0) {
            expertList.innerHTML = '<p>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç–∫—Å–ø–µ—Ä—Ç–æ–≤.</p>';
        } else {
            availableExperts.forEach(expert => {
                const button = document.createElement('button');
                button.className = 'twa-button';
                button.textContent = `üë§ ${expert.name} (${expert.specialtyName}) ‚Äî –æ—Å—Ç–∞–ª–æ—Å—å ${expert.freeSessions}`;
                button.onclick = () => {
                    selectedExpert = expert;
                    renderDaySelection(expert.name);
                };
                expertList.appendChild(button);
            });
        }
    }

    function renderDaySelection(expertName) {
        appTitle.textContent = `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è ${expertName}`;
        hideAllViews();
        calendarView.classList.remove('hidden');
        calendarTitle.textContent = `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å ${expertName}:`;
        daySelection.classList.remove('hidden');
        periodSelection.classList.add('hidden');
        slotSelection.classList.add('hidden');
        daySelection.innerHTML = '';

        const today = new Date();
        for (let i = 1; i <= 7; i++) {
            const date = new Date(today);
            date.setDate(today.getDate() + i);
            const button = document.createElement('button');
            button.className = 'twa-button small';
            button.textContent = `${date.toLocaleDateString('ru-RU', { weekday: 'short', day: 'numeric', month: 'short' })}`;
            button.onclick = () => {
                selectedDate = date.toISOString().slice(0, 10);
                renderPeriodSelection();
            };
            daySelection.appendChild(button);
        }
    }

    function renderPeriodSelection() {
        appTitle.textContent = `–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥`;
        hideAllViews();
        calendarView.classList.remove('hidden');
        calendarTitle.textContent = `–ù–∞ ${new Date(selectedDate).toLocaleDateString('ru-RU', { weekday: 'long', day: 'numeric', month: 'short' })} –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:`;
        daySelection.classList.add('hidden');
        periodSelection.classList.remove('hidden');
        slotSelection.classList.add('hidden');
        periodSelection.innerHTML = '';

        const periods = [
            { key: 'morning', text: 'üåÖ –£—Ç—Ä–æ (09‚Äì12)' },
            { key: 'afternoon', text: '‚òÄÔ∏è –î–µ–Ω—å (12‚Äì16)' },
            { key: 'evening', text: 'üåÜ –í–µ—á–µ—Ä (16‚Äì20)' },
            { key: 'night', text: 'üåô –ù–æ—á—å (20‚Äì22)' }
        ];

        periods.forEach(period => {
            const button = document.createElement('button');
            button.className = 'twa-button';
            button.textContent = period.text;
            button.onclick = () => {
                selectedPeriod = period.key;
                renderSlotSelection();
            };
            periodSelection.appendChild(button);
        });
    }

    async function renderSlotSelection() {
        appTitle.textContent = `–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è`;
        hideAllViews();
        calendarView.classList.remove('hidden');
        calendarTitle.textContent = `–í—ã–±–µ—Ä–∏—Ç–µ 15-–º–∏–Ω—É—Ç–Ω—ã–π —Å–ª–æ—Ç:`;
        daySelection.classList.add('hidden');
        periodSelection.classList.add('hidden');
        slotSelection.classList.remove('hidden');
        slotSelection.innerHTML = '';
        showLoader(true);

        const ranges = {
            morning: [9, 12],
            afternoon: [12, 16],
            evening: [16, 20],
            night: [20, 22]
        };

        const [startHour, endHour] = ranges[selectedPeriod];
        const date = new Date(selectedDate);
        
        // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –∏ –∑–∞–Ω—è—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –±–æ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –∏–∑ TWA
        const dummyBlockedSlots = []; // –ó–∞–≥–ª—É—à–∫–∞, —á—Ç–æ–±—ã –Ω–µ —Å–ª–æ–º–∞—Ç—å
        const dummyBookedSlots = []; // –ó–∞–≥–ª—É—à–∫–∞, —á—Ç–æ–±—ã –Ω–µ —Å–ª–æ–º–∞—Ç—å

        for (let h = startHour; h < endHour; h++) {
            for (let m = 0; m < 60; m += 15) {
                const dt = new Date(date);
                dt.setHours(h, m, 0, 0);
                const isoDateTime = dt.toISOString();

                // –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —Ä–µ–∞–ª—å–Ω–æ–µ API –∫ –±–æ—Ç—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∑–∞–Ω—è—Ç–æ—Å—Ç—å
                // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –∑–∞–≥–ª—É—à–∫–∏:
                const isBooked = dummyBookedSlots.includes(isoDateTime); 
                const isBlockedByExpert = dummyBlockedSlots.includes(isoDateTime);

                const button = document.createElement('button');
                button.className = 'twa-button slot';
                button.textContent = `${h.toString().padStart(2, '0')}:${m.toString().padStart(2, '0')}`;
                
                if (isBooked || isBlockedByExpert) {
                    button.classList.add('disabled');
                    button.textContent += ' ‚ùå';
                    button.disabled = true;
                } else {
                    button.textContent += ' ‚úÖ';
                    button.onclick = () => confirmBooking(isoDateTime);
                }
                slotSelection.appendChild(button);
            }
        }
        showLoader(false);
    }

    async function confirmBooking(isoDateTime) {
        if (!selectedExpert || !isoDateTime) {
            showMessage('–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω —ç–∫—Å–ø–µ—Ä—Ç –∏–ª–∏ –≤—Ä–µ–º—è.');
            return;
        }
        showLoader(true);
        WebApp.MainButton.setText('–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...');
        WebApp.MainButton.show();
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –±–æ—Ç—É
        WebApp.sendData(JSON.stringify({
            type: 'book',
            expertId: selectedExpert.id,
            dateTime: isoDateTime,
            specialty: selectedExpert.specialty // –ü–µ—Ä–µ–¥–∞–µ–º specialty –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞
        }));
        // –ë–æ—Ç —Å–∞–º –æ—Ç–ø—Ä–∞–≤–∏—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ —á–∞—Ç –∏ –∑–∞–∫—Ä–æ–µ—Ç Web App
    }
    
    // --- –§—É–Ω–∫—Ü–∏–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ ---
    function renderAdminPanel() {
        appTitle.textContent = '–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å';
        hideAllViews();
        adminPanel.classList.remove('hidden');
        adminExpertList.innerHTML = '';
        
        // –î–ª—è –∞–¥–º–∏–Ω–∞ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –±–æ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –∏–∑ TWA
        // –ò–ª–∏ TWA –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Å —ç—Ç–∏–º —Å–ø–∏—Å–∫–æ–º
        // –ü–æ–∫–∞ —á—Ç–æ –∑–∞–≥–ª—É—à–∫–∞:
        const allExperts = [
            { id: 'expert1', name: '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤', specialty: 'psychologist', specialtyName: '–ü—Å–∏—Ö–æ–ª–æ–≥' },
            { id: 'expert2', name: '–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞', specialty: 'tarot', specialtyName: '–¢–∞—Ä–æ–ª–æ–≥' }
        ];

        allExperts.forEach(expert => {
            const button = document.createElement('button');
            button.className = 'twa-button';
            button.textContent = `üóìÔ∏è ${expert.name} (${expert.specialtyName})`;
            button.onclick = () => {
                selectedExpert = expert;
                renderAdminScheduleOptions();
            };
            adminExpertList.appendChild(button);
        });
    }

    function renderAdminScheduleOptions() {
        appTitle.textContent = `–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${selectedExpert.name}`;
        hideAllViews();
        adminScheduleOptions.classList.remove('hidden');
        adminExpertName.textContent = selectedExpert.name;

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
        document.querySelector('[data-action="admin_block_slot_day_select"]').onclick = () => {
            adminActionType = 'block';
            renderAdminDaySelection();
        };
        document.querySelector('[data-action="admin_unblock_slot_day_select"]').onclick = () => {
            adminActionType = 'unblock';
            renderAdminDaySelection();
        };
        document.querySelector('[data-action="admin_view_blocked_slots"]').onclick = () => {
            renderAdminViewBlockedSlots();
        };
    }

    function renderAdminDaySelection() {
        appTitle.textContent = `${adminActionType === 'block' ? '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å' : '–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å'} —Å–ª–æ—Ç`;
        hideAllViews();
        adminDaySelection.classList.remove('hidden');
        adminDaySelection.innerHTML = '';

        const today = new Date();
        for (let i = 1; i <= 7; i++) {
            const date = new Date(today);
            date.setDate(today.getDate() + i);
            const button = document.createElement('button');
            button.className = 'twa-button small';
            button.textContent = `${date.toLocaleDateString('ru-RU', { weekday: 'short', day: 'numeric', month: 'short' })}`;
            button.onclick = () => {
                selectedDate = date.toISOString().slice(0, 10);
                renderAdminPeriodSelection();
            };
            adminDaySelection.appendChild(button);
        }
    }

    function renderAdminPeriodSelection() {
        appTitle.textContent = `${adminActionType === 'block' ? '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å' : '–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å'} —Å–ª–æ—Ç`;
        hideAllViews();
        adminPeriodSelection.classList.remove('hidden');
        adminPeriodSelection.innerHTML = '';

        const periods = [
            { key: 'morning', text: 'üåÖ –£—Ç—Ä–æ (09‚Äì12)' },
            { key: 'afternoon', text: '‚òÄÔ∏è –î–µ–Ω—å (12‚Äì16)' },
            { key: 'evening', text: 'üåÜ –í–µ—á–µ—Ä (16‚Äì20)' },
            { key: 'night', text: 'üåô –ù–æ—á—å (20‚Äì22)' }
        ];

        periods.forEach(period => {
            const button = document.createElement('button');
            button.className = 'twa-button';
            button.textContent = period.text;
            button.onclick = () => {
                selectedPeriod = period.key;
                renderAdminSlotSelection();
            };
            adminPeriodSelection.appendChild(button);
        });
    }

    async function renderAdminSlotSelection() {
        appTitle.textContent = `${adminActionType === 'block' ? '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å' : '–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å'} —Å–ª–æ—Ç`;
        hideAllViews();
        adminSlotSelection.classList.remove('hidden');
        adminSlotSelection.innerHTML = '';
        showLoader(true);

        const ranges = {
            morning: [9, 12],
            afternoon: [12, 16],
            evening: [16, 20],
            night: [20, 22]
        };

        const [startHour, endHour] = ranges[selectedPeriod];
        const date = new Date(selectedDate);
        
        // –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –æ—Ç –±–æ—Ç–∞
        // –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞:
        const currentBlockedSlots = []; 

        for (let h = startHour; h < endHour; h++) {
            for (let m = 0; m < 60; m += 15) {
                const dt = new Date(date);
                dt.setHours(h, m, 0, 0);
                const isoDateTime = dt.toISOString();

                const isCurrentlyBlocked = currentBlockedSlots.includes(isoDateTime);

                const button = document.createElement('button');
                button.className = 'twa-button slot';
                button.textContent = `${h.toString().padStart(2, '0')}:${m.toString().padStart(2, '0')}`;
                
                let clickable = false;
                if (adminActionType === 'block' && !isCurrentlyBlocked) {
                    button.textContent += ' ‚úÖ'; // –°–≤–æ–±–æ–¥–Ω—ã–π, –º–æ–∂–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
                    clickable = true;
                } else if (adminActionType === 'unblock' && isCurrentlyBlocked) {
                    button.textContent += ' üö´'; // –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π, –º–æ–∂–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
                    clickable = true;
                } else {
                    button.textContent += isCurrentlyBlocked ? ' üö´' : ' ‚úÖ'; // –ó–∞–≥–ª—É—à–∫–∞, –µ—Å–ª–∏ –Ω–µ–ª—å–∑—è –∫–ª–∏–∫–Ω—É—Ç—å
                    button.classList.add('disabled');
                    button.disabled = true;
                }

                if (clickable) {
                    button.onclick = () => sendAdminSlotAction(isoDateTime);
                }
                adminSlotSelection.appendChild(button);
            }
        }
        showLoader(false);
    }

    function sendAdminSlotAction(isoDateTime) {
        showLoader(true);
        WebApp.MainButton.setText('–û—Ç–ø—Ä–∞–≤–∫–∞...');
        WebApp.MainButton.show();

        WebApp.sendData(JSON.stringify({
            type: `admin_${adminActionType}`, // 'admin_block' –∏–ª–∏ 'admin_unblock'
            expertId: selectedExpert.id,
            dateTime: isoDateTime
        }));
    }

    async function renderAdminViewBlockedSlots() {
        appTitle.textContent = `–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã ${selectedExpert.name}`;
        hideAllViews();
        adminScheduleOptions.classList.remove('hidden'); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç—Ç—É —Å–µ–∫—Ü–∏—é
        // –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –æ—Ç –±–æ—Ç–∞
        // –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞:
        const blockedSlots = ['2025-06-21T05:00:00.000Z', '2025-06-21T09:00:00.000Z']; 

        let message = 'üö´ *–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã:*\n\n';
        if (blockedSlots.length === 0) {
            message = '–£ —ç—Ç–æ–≥–æ —ç–∫—Å–ø–µ—Ä—Ç–∞ –Ω–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤.';
        } else {
            blockedSlots.forEach(slot => {
                message += `- ${new Date(slot).toLocaleString('ru-RU')}\n`;
            });
        }
        showMessage(message);
        showLoader(false);
        // –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        const backButton = document.createElement('button');
        backButton.className = 'twa-button';
        backButton.textContent = 'üîô –ù–∞–∑–∞–¥';
        backButton.onclick = renderAdminScheduleOptions; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è
        messageDiv.appendChild(backButton);
    }


    // --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Ä–æ—É—Ç–∏–Ω–≥ ---
    function initApp() {
        if (!parseInitData()) {
            showMessage('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Web App. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å.');
            return;
        }

        if (isAdmin) {
            renderAdminPanel();
        } else {
            renderExpertSelection();
        }
    }

    initApp();
});
